import telebot
from telebot import types
from telebot.types import BotCommand
import sqlite3
import datetime
import threading
import time
import re
import os
from flask import Flask

app = Flask(__name__)

@app.route('/')
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!", 200

bot = telebot.TeleBot("7424169031:AAE_fq0v6boMqkaW4m4Fu-mXBYYYJtQYa9w")

def setup_commands():
    commands = [
        BotCommand("start", "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
        BotCommand("progress", "–í–∞—à —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å"),
        BotCommand("settime", "–ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"),
        BotCommand("timezone", "–ò–∑–º–µ–Ω–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å"),
        BotCommand("help", "–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º")
    ]
    bot.set_my_commands(commands)

def init_db():
    conn = sqlite3.connect('habits.db', check_same_thread=False)
    cursor = conn.cursor()

    cursor.execute('''
    CREATE TABLE IF NOT EXISTS habits (
        user_id INTEGER,
        habit TEXT,
        reminder_time TEXT,
        current_streak INTEGER DEFAULT 0,
        max_streak INTEGER DEFAULT 0,
        last_reminder_date TEXT,
        last_message_id INTEGER,
        timezone TEXT DEFAULT '+03:00',
        PRIMARY KEY (user_id, habit)
    )
    ''')
    conn.commit()
    return conn, cursor

db_conn, db_cursor = init_db()

@bot.message_handler(commands=['start'])
def start(message):
    markup = types.InlineKeyboardMarkup()
    create_habit_button = types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—Éü¶æ", callback_data="create")
    markup.add(create_habit_button)

    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç, —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤—ã—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–∏–≤—ã—á–∫—É\n\n"
        "–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É'",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data == "create")
def handle_button(call):
    create_habit(call.message)

def create_habit(message):
    cancel_markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    cancel_markup.add(types.KeyboardButton("–û—Ç–º–µ–Ω–∞‚ùå"))

    bot.send_message(
        message.chat.id,
        "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–π –ø—Ä–∏–≤—ã—á–∫–∏ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞'):",
        reply_markup=cancel_markup
    )
    bot.register_next_step_handler(message, ask_habit)

def ask_habit(message):
    if message.text == "–û—Ç–º–µ–Ω–∞‚ùå":
        bot.send_message(
            message.chat.id,
            "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=types.ReplyKeyboardRemove()
        )
        return start(message)

    habit = message.text.strip()

    if not habit or len(habit) > 100:
        bot.send_message(
            message.chat.id,
            "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return create_habit(message)

    try:
        db_cursor.execute(
            "INSERT OR REPLACE INTO habits (user_id, habit) VALUES (?, ?)",
            (message.chat.id, habit)
        )
        db_conn.commit()
        
        timezone_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        timezone_markup.add(
            types.KeyboardButton("–ú–æ—Å–∫–≤–∞ (+3)"),
            types.KeyboardButton("–ö–∏–µ–≤ (+2)"),
            types.KeyboardButton("–î—Ä—É–≥–æ–π")
        )
        
        bot.send_message(
            message.chat.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å:",
            reply_markup=timezone_markup
        )
        bot.register_next_step_handler(message, set_timezone)
        
    except sqlite3.Error as e:
        bot.send_message(
            message.chat.id,
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–∏–≤—ã—á–∫–∏"
        )
        print("DB Error:", e)

def set_timezone(message):
    timezone_map = {
        "–ú–æ—Å–∫–≤–∞ (+3)": "+03:00",
        "–ö–∏–µ–≤ (+2)": "+02:00"
    }
    
    if message.text in timezone_map:
        timezone = timezone_map[message.text]
    elif message.text == "–î—Ä—É–≥–æ–π":
        bot.send_message(
            message.chat.id,
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ ¬±HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, +05:00 –∏–ª–∏ -08:00):",
            reply_markup=types.ReplyKeyboardRemove()
        )
        bot.register_next_step_handler(message, validate_custom_timezone)
        return
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö")
        return ask_habit(message)
    
    db_cursor.execute(
        "UPDATE habits SET timezone = ? WHERE user_id = ?",
        (timezone, message.chat.id)
    )
    db_conn.commit()
    
    cancel_markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    cancel_markup.add(types.KeyboardButton("–û—Ç–º–µ–Ω–∞‚ùå"))
    bot.send_message(
        message.chat.id,
        "–í–æ —Å–∫–æ–ª—å–∫–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏–≤—ã—á–∫–µ? (–ß–ß:–ú–ú)\n"
        "–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ –≤–∞—à–µ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä 08:30)",
        reply_markup=cancel_markup
    )
    bot.register_next_step_handler(message, validate_time_input)

def validate_custom_timezone(message):
    if not re.match(r'^[+-](0[0-9]|1[0-2]):[0-5][0-9]$', message.text):
        bot.send_message(
            message.chat.id,
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç ¬±HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, +05:00 –∏–ª–∏ -08:00)"
        )
        return ask_habit(message)
    
    db_cursor.execute(
        "UPDATE habits SET timezone = ? WHERE user_id = ?",
        (message.text, message.chat.id)
    )
    db_conn.commit()
    
    cancel_markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    cancel_markup.add(types.KeyboardButton("–û—Ç–º–µ–Ω–∞‚ùå"))
    bot.send_message(
        message.chat.id,
        "–í–æ —Å–∫–æ–ª—å–∫–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏–≤—ã—á–∫–µ? (–ß–ß:–ú–ú)\n"
        "–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ –≤–∞—à–µ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä 08:30)",
        reply_markup=cancel_markup
    )
    bot.register_next_step_handler(message, validate_time_input)

def validate_time_input(message):
    if message.text == "–û—Ç–º–µ–Ω–∞‚ùå":
        bot.send_message(
            message.chat.id,
            "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=types.ReplyKeyboardRemove()
        )
        return start(message)
    
    time_input = message.text.strip()

    if not re.match(r'^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$', time_input):
        bot.send_message(
            message.chat.id,
            "‚õî –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 08:30 –∏–ª–∏ 21:45)\n"
            "–ß–∞—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 00 –¥–æ 23, –º–∏–Ω—É—Ç—ã –æ—Ç 00 –¥–æ 59."
        )
        bot.register_next_step_handler(message, validate_time_input)
        return

    try:
        db_cursor.execute(
            "UPDATE habits SET reminder_time = ? WHERE user_id = ?",
            (time_input, message.chat.id)
        )
        db_conn.commit()

        # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        db_cursor.execute(
            "SELECT timezone FROM habits WHERE user_id = ? LIMIT 1",
            (message.chat.id,)
        )
        timezone = db_cursor.fetchone()[0]

        bot.send_message(
            message.chat.id,
            f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ë—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –ø—Ä–∏–≤—ã—á–∫–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {time_input} "
            f"(–ø–æ –≤–∞—à–µ–º—É –º–µ—Å—Ç–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏, —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å {timezone}).",
            reply_markup=types.ReplyKeyboardRemove()
        )

    except sqlite3.Error as e:
        bot.send_message(
            message.chat.id,
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"
        )
        print("DB Error:", e)

def send_reminders():
    now_utc = datetime.datetime.utcnow()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Ö —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏
    db_cursor.execute(
        "SELECT DISTINCT user_id, timezone FROM habits WHERE reminder_time IS NOT NULL"
    )
    users = db_cursor.fetchall()
    
    for user_id, timezone in users:
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –≤ timedelta
            tz_sign = 1 if timezone[0] == '+' else -1
            tz_hours = int(timezone[1:3])
            tz_minutes = int(timezone[4:6])
            tz_delta = datetime.timedelta(
                hours=tz_hours * tz_sign,
                minutes=tz_minutes * tz_sign
            )
            
            # –í—ã—á–∏—Å–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_local_time = now_utc + tz_delta
            current_time_str = user_local_time.strftime("%H:%M")
            today_date = user_local_time.strftime("%Y-%m-%d")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            db_cursor.execute(
                """SELECT habit FROM habits 
                WHERE user_id = ? 
                AND reminder_time = ?
                AND (last_reminder_date IS NULL OR last_reminder_date != ?)""",
                (user_id, current_time_str, today_date)
            )
            habits = db_cursor.fetchall()
            
            for (habit,) in habits:
                markup = types.InlineKeyboardMarkup()
                yes_btn = types.InlineKeyboardButton("‚úÖ –°–¥–µ–ª–∞–ª", callback_data=f"done_{habit}")
                no_btn = types.InlineKeyboardButton("‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏–ª", callback_data=f"skip_{habit}")
                markup.add(yes_btn, no_btn)

                try:
                    sent_msg = bot.send_message(
                        user_id,
                        f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {habit}! –¢—ã —Å–µ–≥–æ–¥–Ω—è –≤—ã–ø–æ–ª–Ω–∏–ª?",
                        reply_markup=markup
                    )

                    db_cursor.execute(
                        """UPDATE habits 
                        SET last_reminder_date = ?, 
                        last_message_id = ? 
                        WHERE user_id = ? AND habit = ?""",
                        (today_date, sent_msg.message_id, user_id, habit)
                    )
                    db_conn.commit()

                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                    
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    try:
        bot.delete_message(call.message.chat.id, call.message.message_id)

        if "_" not in call.data:
            return

        action, habit = call.data.split("_", 1)
        user_id = call.message.chat.id
        today = datetime.datetime.now().strftime("%Y-%m-%d")

        db_cursor.execute(
            "SELECT last_reminder_date, current_streak FROM habits WHERE user_id = ? AND habit = ?",
            (user_id, habit)
        )
        result = db_cursor.fetchone()

        if not result:
            bot.answer_callback_query(call.id, "–ü—Ä–∏–≤—ã—á–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return

        last_date, current_streak = result

        if last_date == today:
            bot.answer_callback_query(call.id, "–í—ã —É–∂–µ –æ—Ç–º–µ—á–∞–ª–∏ —ç—Ç—É –ø—Ä–∏–≤—ã—á–∫—É —Å–µ–≥–æ–¥–Ω—è!")
            return

        if action == "done":
            new_streak = current_streak + 1
            db_cursor.execute(
                """UPDATE habits 
                SET current_streak = ?, 
                    max_streak = MAX(max_streak, ?),
                    last_reminder_date = ?
                WHERE user_id = ? AND habit = ?""",
                (new_streak, new_streak, today, user_id, habit)
            )
            db_conn.commit()

            bot.send_message(
                user_id,
                f"üî• –û—Ç–ª–∏—á–Ω–æ! –¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è: {new_streak} –¥–Ω–µ–π!"
            )

        elif action == "skip":
            db_cursor.execute(
                "UPDATE habits SET current_streak = 0, last_reminder_date = ? WHERE user_id = ? AND habit = ?",
                (today, user_id, habit)
            )
            db_conn.commit()

            bot.send_message(
                user_id,
                "üò¢ –°–µ—Ä–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞. –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ –∑–∞–≤—Ç—Ä–∞!"
            )

        bot.answer_callback_query(call.id)

    except Exception as e:
        print(f"Error in callback: {e}")
        bot.answer_callback_query(call.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@bot.message_handler(commands=['help'])
def show_help(message):
    help_text = """
üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/progress - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å
/settime - –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
/timezone - –ò–∑–º–µ–Ω–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

‚ÑπÔ∏è –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ—ë –≤ –º–µ–Ω—é.
"""
    bot.send_message(message.chat.id, help_text, parse_mode='HTML')

@bot.message_handler(commands=['progress'])
def progress(message):
    try:
        db_cursor.execute(
            "SELECT habit, current_streak, max_streak FROM habits WHERE user_id = ?",
            (message.chat.id,)
        )
        habits = db_cursor.fetchall()

        if not habits:
            bot.send_message(message.chat.id, "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫.")
            return

        response = "üìä –¢–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å:\n"
        for habit, streak, max_streak in habits:
            response += f"- {habit}: —Ç–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è {streak} –¥–Ω–µ–π (—Ä–µ–∫–æ—Ä–¥: {max_streak})\n"

        bot.send_message(message.chat.id, response)

    except sqlite3.Error as e:
        print("SQLite error:", e)
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        print("Error:", e)
        bot.send_message(message.chat.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ üò¢")

@bot.message_handler(commands=['timezone'])
def change_timezone(message):
    timezone_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    timezone_markup.add(
        types.KeyboardButton("–ú–æ—Å–∫–≤–∞ (+3)"),
        types.KeyboardButton("–ö–∏–µ–≤ (+2)"),
        types.KeyboardButton("–î—Ä—É–≥–æ–π")
    )
    
    bot.send_message(
        message.chat.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å:",
        reply_markup=timezone_markup
    )
    bot.register_next_step_handler(message, process_timezone_change)

def process_timezone_change(message):
    timezone_map = {
        "–ú–æ—Å–∫–≤–∞ (+3)": "+03:00",
        "–ö–∏–µ–≤ (+2)": "+02:00"
    }
    
    if message.text in timezone_map:
        timezone = timezone_map[message.text]
    elif message.text == "–î—Ä—É–≥–æ–π":
        bot.send_message(
            message.chat.id,
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ ¬±HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, +05:00 –∏–ª–∏ -08:00):",
            reply_markup=types.ReplyKeyboardRemove()
        )
        bot.register_next_step_handler(message, process_custom_timezone)
        return
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö")
        return change_timezone(message)
    
    db_cursor.execute(
        "UPDATE habits SET timezone = ? WHERE user_id = ?",
        (timezone, message.chat.id)
    )
    db_conn.commit()
    
    bot.send_message(
        message.chat.id,
        f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {timezone}",
        reply_markup=types.ReplyKeyboardRemove()
    )

def process_custom_timezone(message):
    if not re.match(r'^[+-](0[0-9]|1[0-2]):[0-5][0-9]$', message.text):
        bot.send_message(
            message.chat.id,
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç ¬±HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, +05:00 –∏–ª–∏ -08:00)"
        )
        return change_timezone(message)
    
    db_cursor.execute(
        "UPDATE habits SET timezone = ? WHERE user_id = ?",
        (message.text, message.chat.id)
    )
    db_conn.commit()
    
    bot.send_message(
        message.chat.id,
        f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {message.text}",
        reply_markup=types.ReplyKeyboardRemove()
    )

def reminder_scheduler():
    while True:
        try:
            send_reminders()
            time.sleep(60 - datetime.datetime.now().second)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ scheduler: {e}")
            time.sleep(10)

def run_bot():
    setup_commands()
    scheduler_thread = threading.Thread(target=reminder_scheduler, daemon=True)
    scheduler_thread.start()

    while True:
        try:
            print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç...")
            bot.polling(none_stop=True, interval=1, timeout=30)
        except Exception as e:
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
            print("–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
            time.sleep(10)

if __name__ == "__main__":
    try:
        flask_thread = threading.Thread(
            target=app.run,
            kwargs={'host': '0.0.0.0', 'port': int(os.environ.get('PORT', 5000))},
            daemon=True
        )
        flask_thread.start()
        
        run_bot()
    finally:
        db_conn.close()
